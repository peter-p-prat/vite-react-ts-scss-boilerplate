@keyframes shimmer {
  0% {
    background-position: 120% 0;
  }
  100% {
    background-position: -100% 0;
  }
}

@mixin skeletonContentShimmer {
  position: relative;
  background: #3a3a3a;
  background-image: linear-gradient(to right, #3a3a3a 0%, #3f3f3f 10%, #4a4a4a 20%, #3f3f3f 30%, #3a3a3a 50%, #3a3a3a 100%);
  background-repeat: no-repeat;
  background-size: 200% 100%;

  @include animation(shimmer, 1.5s, ease-in-out, 0s, infinite, normal, forwards);

  @content;
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes growOut {
  0% {
    transform: scale(0);
  }
  80% {
    transform: scale(1.1);
  }
  100% {
    transform: scale(1);
  }
}

/// Mixin to generate an animation from the animations keyframes defined
/// @requires {String} $name - The animation name defined from the keyframs
/// @param {String} $duration [1s] - The duration of the animation
/// @param {String} $timing-function [ease] - How animation progresses through the cycle
/// @param {String} $delay [0s] - The delay before the animation starts
/// @param {String} $iteration-count [1] - The number of times the animation should be played
/// @param {String} $direction [normal] - The direction of the animation should be played in the sequence
/// @param {String} $fill-mode [forwards] - How animation applies styles to its targets before and after its execution
@mixin animation($name, $duration: 1s, $timing-function: ease, $delay: 0s, $iteration-count: 1, $direction: normal, $fill-mode: forwards) {
  animation: $name $duration $timing-function $delay $iteration-count $direction $fill-mode;
}
