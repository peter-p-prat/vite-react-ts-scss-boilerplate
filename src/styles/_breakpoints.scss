@use "sass:map";
@use "sass:list";

// Map of breakpoints to be referenced from breakpoint mixins
$default-breakpoints: (
  mobile: 0,
  tablet: 768px,
  desktop: 1220px,
) !default;

// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (mobile: 0, tablet: 768px, desktop: 1220px,)
//
// The map defined in the `$default-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(tablet)
//    desktop
//    >> breakpoint-next(tablet, (mobile: 0, tablet: 768px, desktop: 1220px))
//    desktop
//    >> breakpoint-next(tablet, $breakpoint-names: (mobile tablet desktop))
//    desktop
@function breakpoint-next($name, $breakpoints: $default-breakpoints, $breakpoint-names: map.keys($breakpoints)) {
  $n: list.index($breakpoint-names, $name);
  @if not $n {
    @error "breakpoint `#{$name}` not found in `#{$breakpoints}`";
  }
  @return if($n < list.length($breakpoint-names), list.nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(tablet, (mobile: 0, tablet: 768px, desktop: 1220px))
//    768px
@function breakpoint-min($name, $breakpoints: $default-breakpoints) {
  $min: map.get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Maximum breakpoint width.
// The maximum value is reduced by 0.02px to work around the limitations of
// `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(desktop, (mobile: 0, tablet: 768px, desktop: 1220px))
//    767.98px
@function breakpoint-max($name, $breakpoints: $default-breakpoints) {
  $max: map.get($breakpoints, $name);
  @return if($max and $max > 0, $max - 0.02, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(mobile, (mobile: 0, tablet: 768px, desktop: 1220px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(tablet, (mobile: 0, tablet: 768px, desktop: 1220px))
//    "-tablet"
@function breakpoint-infix($name, $breakpoints: $default-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

/// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
/// Makes the content apply to the given breakpoint and wider.
/// @param {String} $name - The breakpoint name (mobile | tablet | desktop)
/// @param {String} $breakpoints [default-breakpoints] - The breakpoints map (optional)
/// @requires $default-breakpoints
@mixin media-breakpoint-up($name, $breakpoints: $default-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

/// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
/// Makes the content apply to the given breakpoint and narrower.
/// @param {String} $name - The breakpoint name (mobile | tablet | desktop)
/// @param {String} $breakpoints [default-breakpoints] - The breakpoints map (optional)
/// @requires $default-breakpoints
@mixin media-breakpoint-down($name, $breakpoints: $default-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

/// Media that spans multiple breakpoint widths.
/// Makes the content apply between the min and max breakpoints
/// @param {String} $lower - The min breakpoint name (mobile | tablet | desktop)
/// @param {String} $upper - The max breakpoint name (mobile | tablet | desktop)
/// @param {String} $breakpoints [default-breakpoints] - The breakpoints map (optional)
/// @requires $default-breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $default-breakpoints) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

/// Media between the breakpoint's minimum and maximum widths.
/// No minimum for the smallest breakpoint, and no maximum for the largest one.
/// Makes the content apply only to the given breakpoint, not viewports any wider or narrower.
/// @param {String} $name - The breakpoint name (mobile | tablet | desktop)
/// @param {String} $breakpoints [default-breakpoints] - The breakpoints map (optional)
/// @requires $default-breakpoints
@mixin media-breakpoint-only($name, $breakpoints: $default-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  $next: breakpoint-next($name, $breakpoints);
  $max: breakpoint-max($next);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($next, $breakpoints) {
      @content;
    }
  }
}
